#!/usr/bin/env bash

# set these variables if you don't have access to environment variables
# COMPANY_NAME='your company name'
# COMPANY_URL='your company url'
# FULL_COMPANY_URL="http://${COMPANY_URL}" # adds 'http://' to COMPANY_URL
# AUTHOR='your name'
# AUTHOR_URL='your url'

# the order of these IS_* variables is important...
IS_SRC_DIR='src'
IS_BUILD_DIR='build'
IS_SUPPORT_DIR='support'
IS_TEST_DIR='test'

IS_SRC_COFFEE_DIR="${IS_SRC_DIR}/coffee"
IS_SRC_COFFEE_TEST_DIR="${IS_SRC_COFFEE_DIR}/test"
IS_SRC_IMG_DIR="${IS_SRC_DIR}/img"
IS_SRC_JADE_DIR="${IS_SRC_DIR}/jade"
IS_SRC_JADE_INC_DIR="${IS_SRC_JADE_DIR}/inc"
IS_SRC_JADE_TEST_DIR="${IS_SRC_JADE_DIR}/test"
IS_SRC_JINJA_DIR="${IS_SRC_DIR}/jinja"
IS_SRC_SPRITES_DIR="${IS_SRC_IMG_DIR}/sprites"
IS_SRC_STYL_DIR="${IS_SRC_DIR}/styl"
IS_SRC_STYL_INC_DIR="${IS_SRC_STYL_DIR}/inc"
IS_SRC_STYL_TEST_DIR="${IS_SRC_STYL_DIR}/test"
IS_SRC_VENDOR_DIR="${IS_SRC_DIR}/vendor"

IS_BUILD_CSS_NAME='css'
IS_BUILD_IMG_NAME='img'
IS_BUILD_JS_NAME='js'
IS_BUILD_VENDOR_NAME='vendor'
IS_BUILD_CSS_DIR="${IS_BUILD_DIR}/${IS_BUILD_CSS_NAME}"
IS_BUILD_IMG_DIR="${IS_BUILD_DIR}/${IS_BUILD_IMG_NAME}"
IS_BUILD_JS_DIR="${IS_BUILD_DIR}/${IS_BUILD_JS_NAME}"
IS_BUILD_VENDOR_DIR="${IS_BUILD_DIR}/${IS_BUILD_VENDOR_NAME}"
IS_BUILD_DIRS="${IS_BUILD_CSS_NAME} ${IS_BUILD_IMG_NAME} ${IS_BUILD_JS_NAME} ${IS_BUILD_VENDOR_NAME}"

IS_IGNORE_PATHS="${IS_BUILD_DIR}"

mkdir -p\
	${IS_SRC_COFFEE_DIR}\
	${IS_SRC_COFFEE_TEST_DIR}\
	${IS_SRC_JADE_DIR}\
	${IS_SRC_JADE_INC_DIR}\
	${IS_SRC_JADE_TEST_DIR}\
	${IS_SRC_JINJA_DIR}\
	${IS_SRC_SPRITES_DIR}\
	${IS_SRC_STYL_DIR}\
	${IS_SRC_STYL_INC_DIR}\
	${IS_SRC_STYL_TEST_DIR}\
	${IS_SRC_VENDOR_DIR}\
	${IS_SUPPORT_DIR}\
	${IS_TEST_DIR}

# create coffeescript files unless they exist
coffeeFiles=(main)
for file in ${coffeeFiles[*]}
do
	f="${IS_SRC_COFFEE_DIR}/${file}.coffee"
	if [ ! -e $f ]
	then
		touch $f
	fi
done

# create jade files unless they exist
jadeFiles=(index)
for file in ${jadeFiles[*]}
do
	f="${IS_SRC_JADE_DIR}/${file}.jade"
	if [ ! -e $f ]
	then
		case "${file}" in
		'index')
		cat <<TEXT > $f
doctype strict
html(lang='en')
	head
		meta(charset='utf-8')
	body
TEXT
			;;

			*) touch $f
			;;
		esac
	fi
done

# create stylus files unless they exist
stylusFiles=(main)
for file in ${stylusFiles[*]}
do
	f="${IS_SRC_STYL_DIR}/${file}.styl"
	if [ ! -e $f ]
	then
		case "${file}" in
		'main')
		cat <<-TEXT > $f
		@require 'nib'
		global-reset()
		@require 'inc'
TEXT
			;;

			*) touch $f
			;;
		esac
	fi
done

# create stylus include files unless they exist
stylusIncFiles=(buttons colors config design index layout text)
for file in ${stylusIncFiles[*]}
do
	f="${IS_SRC_STYL_INC_DIR}/${file}.styl"
	if [ ! -e $f ]
	then
		case "${file}" in
		'index')
			cat <<-TEXT > $f
			@require 'config'
			@require 'colors'
			@require 'design'
			@require 'layout'
			@require 'text'
			@require 'buttons'
TEXT
			;;

		*) touch $f
			;;
		esac
	fi
done

# create git repo unless it exists
if [[ ! -d .git ]]
then
	git init --quiet ./
fi

# create .gitignore unless it exists
if [[ ! -e .gitignore ]]
then
	cat <<EOF > .gitignore
${IS_IGNORE_PATHS}
EOF
fi

# create Readme.md unless it exists
readme='Readme.md'
if [ ! -e $readme ]
then
cat <<-EOF > $readme
	# Project Name
	**Organization** [${COMPANY_NAME}][comanpyURL]
	**Author** [${AUTHOR}][authorURL]
	$(date)

	[companyURL]: ${FULL_COMPANY_URL}
	[authorURL]: ${AUTHOR_URL}
EOF
fi

# create makefile unless it exists
makefile='Makefile'
if [ ! -e $makefile ]
then
cat <<EOF > $makefile
.PHONY: all clean \$(DEV_DEPS) \$(PROD_DEPS) test

# CONFIG
SHELL    := /bin/bash
MAKEFLAGS = -j \$(words \$(DEV_DEPS)) # limit parallel recipe execution

# DIRECTORIES
SRC.DIR            := ${IS_SRC_DIR}
BUILD.DIR          := ${IS_BUILD_DIR}
SUPPORT.DIR        := ${IS_SUPPORT_DIR}
TEST.DIR           := ${IS_TEST_DIR}

SRC.COFFEE_DIR      = \$(SRC.DIR)/coffee
SRC.COFFEE_TEST_DIR = \$(SRC.COFFEE_DIR)/test
SRC.IMG_DIR         = \$(SRC.DIR)/img
SRC.JADE_DIR        = \$(SRC.DIR)/jade
SRC.JADE_INC_DIR    = \$(SRC.JADE_DIR)/inc
SRC.JADE_TEST_DIR   = \$(SRC.JADE_DIR)/test
SRC.JINJA_DIR       = \$(SRC.DIR)/jinja
SRC.STYLUS_DIR      = \$(SRC.DIR)/styl
SRC.STYLUS_INC_DIR  = \$(SRC.STYLUS_DIR)/inc
SRC.STYLUS_TEST_DIR = \$(SRC.STYLUS_DIR)/test
SRC.VENDOR_DIR      = \$(SRC.DIR)/vendor

BUILD.CSS_NAME     := css
BUILD.IMG_NAME     := img
BUILD.JS_NAME      := js
BUILD.VENDOR_NAME  := vendor
BUILD.CSS_DIR       = \$(BUILD.DIR)/\$(BUILD.CSS_NAME)
BUILD.IMG_DIR       = \$(BUILD.DIR)/\$(BUILD.IMG_NAME)
BUILD.JS_DIR        = \$(BUILD.DIR)/\$(BUILD.JS_NAME)
BUILD.VENDOR_DIR    = \$(BUILD.DIR)/\$(BUILD.VENDOR_NAME)
BUILD.DIRS          = \$(BUILD.CSS_DIR)
BUILD.DIRS         += \$(BUILD.IMG_DIR)
BUILD.DIRS         += \$(BUILD.JS_DIR)
BUILD.DIRS         += \$(BUILD.VENDOR_DIR)

# DEPENDENCIES
DEV_DEPS := dev.dirs dev.coffee dev.jade dev.styl
PROD_DEPS = \$(DEV_DEPS:dev.%=prod.%)

# COMMANDS
CLEAN.CMD        = rm \$(CLEAN.FLAGS)
CLEAN.FLAGS     := -rf

COFFEE.CMD       = coffee \$(COFFEE.FLAGS)
COFFEE.FLAGS    := --compile --no-header

GLUE.CMD         = glue \$(GLUE.FLAGS)
GLUE.FLAGS      := --algorithm vertical
GLUE.FLAGS      += --cachebuster
GLUE.FLAGS      += --crop
GLUE.FLAGS      += --css \$(SRC.STYLUS_DIR)/inc/sprites
GLUE.FLAGS      += --css-template \$(SRC.JINJA_DIR)/css.jinja
GLUE.FLAGS      += --follow-links
GLUE.FLAGS      += --img \$(BUILD.IMG_DIR)
GLUE.FLAGS      += --margin='0 0 10 0'
GLUE.FLAGS      += --namespace=
GLUE.FLAGS      += --ordering maxside
GLUE.FLAGS      += --project
GLUE.FLAGS      += --pseudo-class-separator __
GLUE.FLAGS      += --separator camelcase
GLUE.FLAGS      += --source \$(SRC.IMG_DIR)/sprites
GLUE.FLAGS      += --sprite-namespace=
GLUE.FLAGS      += --url=../img/

JADE.CMD         = jade \$(JADE.FLAGS)
JADE.FLAGS      := --pretty

MKDIRS.CMD       = mkdir \$(MKDIRS.FLAGS)
MKDIRS.FLAGS    := -p

MOCHA.CMD        = mocha \$(MOCHA.FLAGS)
MOCHA.FLAGS     := --compilers coffee:coffee-script/register
MOCHA.FLAGS     += --require chai
MOCHA.FLAGS     += --ui \$(MOCHA.INTERFACE)
MOCHA.FLAGS     += --reporter \$(MOCHA.REPORTER)
MOCHA.INTERFACE := bdd
MOCHA.REPORTER  := min

STYLUS.CMD       = stylus \$(STYLUS.FLAGS)
STYLUS.FLAGS    := --use 'nib'
STYLUS.FLAGS    += --include-css

UGLIFY.CMD       = uglifyjs \$(UGLIFY.FLAGS)
UGLIFY.FLAGS    := --mangle
UGLIFY.FLAGS    += --compress

all: prod

dev: | \$(DEV_DEPS)

dev.dirs:
	\$(MKDIRS.CMD) \$(BUILD.DIRS)

dev.coffee:
	\$(COFFEE.CMD) --watch --output \$(BUILD.JS_DIR) \$(SRC.COFFEE_DIR)

dev.glue:
	\$(GLUE.CMD) --watch

dev.jade:
	\$(JADE.CMD) --watch \$(SRC.JADE_DIR) --out \$(BUILD.DIR)

dev.styl:
	\$(STYLUS.CMD) --watch \$(SRC.STYLUS_DIR) --out \$(BUILD.CSS_DIR)

prod: | \$(PROD_DEPS)
	@echo -e '\033[32mBuild Complete!\033[0m'

prod.dirs:
	@\$(MKDIRS.CMD) \$(BUILD.DIRS)

prod.coffee:
	@echo -e '\033[33mCompiling CoffeeScript...\033[0m'
	@\$(COFFEE.CMD) --output \$(BUILD.JS_DIR) \$(SRC.COFFEE_DIR) > /dev/null
	@#\$(UGLIFY.CMD) [<files to uglify>] --output <outputFile.min.js> > /dev/null

prod.glue:
	@\$(GLUE.CMD) > /dev/null

prod.jade:
	@echo -e '\033[33mCompiling Jade...\033[0m'
	@\$(JADE.CMD) \$(SRC.JADE_DIR) --out \$(BUILD.DIR) > /dev/null

prod.styl:
	@echo -e '\033[33mCompiling Stylus...\033[0m'
	@\$(STYLUS.CMD) --compress \$(SRC.STYLUS_DIR) --out \$(BUILD.CSS_DIR) > /dev/null

#test:
#	\$(MOCHA.CMD) -w \$(TEST.DIR)

clean:
	@echo -e '\033[33mCleaning Project...\033[0m'
	@\$(CLEAN.CMD)\\
		\$(BUILD.DIR)/*\\
		\$(SRC.STYLUS_DIR)/inc/sprites/*.css
	@echo -e '\033[32mProject Clean!\033[0m'
EOF
fi
